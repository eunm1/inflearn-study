rest api monitoring 을 추가하면 서버의 현재 상태를 알수 잇다
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-actuator</artifactId>
</dependency>

추가해주는 것만으로도 확인 가능
확인 주소값
localhost:8088/actuator
localhost:8088/actuator/health : 서버상태 확인 가능(up : 작동중)

spring 2.1에서 더 많은 정보를 확인 할수 있는 api설정
application.yml에서
management:
endpoints:
web:
exposure:
include:"*"

application.properties
management.
endpoints.
web.
exposure.
include="*"


json형식의 html을 보기 좋게 만드는google의 plugin
google 웹 스토어에
json viewer 검색 및 추가

Hal browser
response 객체에 추가적인 정보를 제공하는 api
hypertext application language
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-boot-rest-hal-browser</artifactId>
		</dependency>

localhost:8088에서 hal brower확인 가능
나온 화면에서 explorer에서 .actuator를 검색한다
http://localhost:8088/actuator
http://localhost:8088/actuator/metrics
http://localhost:8088/actuator/metrics/jvm.memory.max
-> 메모리 현재 사이즈의 최대값을 볼수잇다


spring security를 이용한 인증처리
웹 브라우저를 사용하지 않는다
서버 실행 후에 console창에서 password를 검색하여 자동으로 생성된 비밀번호 값을 가져온다
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>

postman에서 localhost:8088/users/1을하면 사용자 인증이 되지 않아서 401창이 발생한다
이것에 인증 처리를 위해서는
authorization tab에서 type : basic auth로 설정한 뒤
username : user
password : 콘솔에서 가져온 정보

-> 결과값을 올바르게 받을수 있다


configuration 클래스를 이용한 사용자 인증
// 사용자가 지정한 username과 password를 사용할 수 있다
// 위의 dependency는 설정되어 있어야 한다
application.yml에서
기존 spring부분에 security 내용을 추가한다
spring:
  messages:
    basename : messages
  security:
    user:
      name: username
      password: passw0rd


postman에서 확인한다

spring security 설정작업을 위한 
config 파일을 생성하겠다
